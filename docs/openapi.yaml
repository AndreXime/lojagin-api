openapi: 3.0.3

info:
    title: API da LojaGin
    description: 'Documentação completa para a API da LojaGin, construída com Gin e GORM.'
    version: 1.0.1

servers:
    - url: http://localhost:8080/api

tags:
    - name: Auth
      description: Operações de Autenticação e Registro
    - name: Users
      description: Operações para gerenciamento de usuários
    - name: Categories
      description: Operações para gerenciamento de categorias
    - name: Products
      description: Operações para gerenciamento de produtos
    - name: Cart
      description: Operações do carrinho de compras

components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        User:
            type: object
            description: 'Representa um usuário no sistema (resposta)'
            properties:
                ID: { type: integer, format: int64, example: 1 }
                CreatedAt: { type: string, format: date-time }
                UpdatedAt: { type: string, format: date-time }
                name: { type: string, example: 'João da Silva' }
                email: { type: string, format: email, example: 'joao.silva@example.com' }

        Category:
            type: object
            description: 'Representa uma categoria de produto'
            properties:
                ID: { type: integer, example: 1 }
                CreatedAt: { type: string, format: date-time }
                UpdatedAt: { type: string, format: date-time }
                name: { type: string, example: 'Eletrônicos' }

        Product:
            type: object
            description: 'Representa um produto no sistema'
            properties:
                ID: { type: integer, example: 101 }
                CreatedAt: { type: string, format: date-time }
                UpdatedAt: { type: string, format: date-time }
                name: { type: string, example: 'Notebook Gamer' }
                price: { type: number, format: float, example: 4999.90 }
                category_id: { type: integer, example: 1 }
                category: { $ref: '#/components/schemas/Category' }

        CartItem:
            type: object
            properties:
                ID: { type: integer }
                product_id: { type: integer }
                quantity: { type: integer }
                product: { $ref: '#/components/schemas/Product' }

        Cart:
            type: object
            properties:
                ID: { type: integer }
                user_id: { type: integer }
                items: { type: array, items: { $ref: '#/components/schemas/CartItem' } }

        OrderItem:
            type: object
            properties:
                product: { $ref: '#/components/schemas/Product' }
                quantity: { type: integer }
                price: { type: number, format: float, description: 'Preço do produto no momento da compra' }

        Order:
            type: object
            properties:
                ID: { type: integer }
                user_id: { type: integer }
                total: { type: number, format: float }
                order_items: { type: array, items: { $ref: '#/components/schemas/OrderItem' } }

        # --- Respostas Genéricas ---
        SuccessMessage:
            type: object
            properties:
                message: { type: string, example: 'Operação realizada com sucesso' }

        Error:
            type: object
            properties:
                error: { type: string, example: 'Mensagem de erro descritiva' }

security:
    - BearerAuth: []

paths:
    # --- Auth Endpoints ---
    /auth/register:
        post:
            tags: [Auth]
            summary: Registrar um novo usuário
            security: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name: { type: string, example: 'Maria Souza' }
                                email: { type: string, format: email, example: 'maria.souza@example.com' }
                                password:
                                    {
                                        type: string,
                                        format: password,
                                        description: 'Mínimo 8 caracteres',
                                        example: 'senhaForte123',
                                    }
                            required: [name, email, password]
            responses:
                '201':
                    {
                        description: 'Usuário criado com sucesso.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/SuccessMessage' } } },
                    }
                '400':
                    {
                        description: 'Dados inválidos.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } },
                    }
                '409':
                    {
                        description: 'E-mail já está em uso.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } },
                    }

    /auth/login:
        post:
            tags: [Auth]
            summary: Autenticar um usuário
            security: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email: { type: string, format: email, example: 'joao.silva@example.com' }
                                password: { type: string, format: password, example: 'senhaForte123' }
                            required: [email, password]
            responses:
                '200':
                    {
                        description: 'Login bem-sucedido.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/SuccessMessage' } } },
                    }
                '401':
                    {
                        description: 'Credenciais inválidas.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } },
                    }

    # --- Users Endpoints ---
    /users/:
        get:
            tags: [Users]
            summary: Listar todos os usuários
            responses:
                '200':
                    {
                        description: 'Lista de usuários.',
                        content:
                            {
                                application/json:
                                    { schema: { type: array, items: { $ref: '#/components/schemas/User' } } },
                            },
                    }
                '401': { description: 'Não autorizado.' }

    /users/{id}:
        get:
            tags: [Users]
            summary: Obter um usuário por ID
            parameters:
                - { name: id, in: path, required: true, schema: { type: integer } }
            responses:
                '200':
                    {
                        description: 'Usuário encontrado.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/User' } } },
                    }
                '401': { description: 'Não autorizado.' }
                '404': { description: 'Usuário não encontrado.' }
        put:
            tags: [Users]
            summary: Atualizar um usuário
            parameters:
                - { name: id, in: path, required: true, schema: { type: integer } }
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name: { type: string, example: 'Maria de Souza' }
                                email: { type: string, format: email, example: 'maria.desouza@example.com' }
            responses:
                '200':
                    {
                        description: 'Usuário atualizado.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/User' } } },
                    }
                '401': { description: 'Não autorizado.' }
                '404': { description: 'Usuário não encontrado.' }
        delete:
            tags: [Users]
            summary: Deletar um usuário
            parameters:
                - { name: id, in: path, required: true, schema: { type: integer } }
            responses:
                '204': { description: 'Usuário deletado com sucesso.' }
                '401': { description: 'Não autorizado.' }
                '404': { description: 'Usuário não encontrado.' }

    # --- Categories Endpoints ---
    /categories/:
        get:
            tags: [Categories]
            summary: Listar todas as categorias
            security: []
            responses:
                '200':
                    {
                        description: 'Lista de categorias.',
                        content:
                            {
                                application/json:
                                    { schema: { type: array, items: { $ref: '#/components/schemas/Category' } } },
                            },
                    }
        post:
            tags: [Categories]
            summary: Criar uma nova categoria
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties: { name: { type: string, example: 'Livros' } }
                            required: [name]
            responses:
                '201':
                    {
                        description: 'Categoria criada.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Category' } } },
                    }
                '401': { description: 'Não autorizado.' }

    /categories/{id}:
        get:
            tags: [Categories]
            summary: Obter uma categoria por ID
            security: []
            parameters:
                - { name: id, in: path, required: true, schema: { type: integer } }
            responses:
                '200':
                    {
                        description: 'Categoria encontrada.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Category' } } },
                    }
                '404': { description: 'Categoria não encontrada.' }
        put:
            tags: [Categories]
            summary: Atualizar uma categoria
            parameters:
                - { name: id, in: path, required: true, schema: { type: integer } }
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties: { name: { type: string, example: 'Livros e Revistas' } }
            responses:
                '200':
                    {
                        description: 'Categoria atualizada.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Category' } } },
                    }
                '401': { description: 'Não autorizado.' }
                '404': { description: 'Categoria não encontrada.' }
        delete:
            tags: [Categories]
            summary: Deletar uma categoria
            parameters:
                - { name: id, in: path, required: true, schema: { type: integer } }
            responses:
                '204': { description: 'Categoria deletada com sucesso.' }
                '401': { description: 'Não autorizado.' }
                '404': { description: 'Categoria não encontrada.' }

    # --- Products Endpoints ---
    /products/:
        get:
            tags: [Products]
            summary: Listar todos os produtos
            security: []
            responses:
                '200':
                    {
                        description: 'Lista de produtos.',
                        content:
                            {
                                application/json:
                                    { schema: { type: array, items: { $ref: '#/components/schemas/Product' } } },
                            },
                    }
        post:
            tags: [Products]
            summary: Criar um novo produto
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name: { type: string, example: 'Mouse sem Fio' }
                                price: { type: number, format: float, example: 89.90 }
                                category_id: { type: integer, example: 1 }
                            required: [name, price, category_id]
            responses:
                '201':
                    {
                        description: 'Produto criado.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } },
                    }
                '401': { description: 'Não autorizado.' }

    /products/{id}:
        get:
            tags: [Products]
            summary: Obter um produto por ID
            security: []
            parameters:
                - { name: id, in: path, required: true, schema: { type: integer } }
            responses:
                '200':
                    {
                        description: 'Produto encontrado.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } },
                    }
                '404': { description: 'Produto não encontrado.' }
        put:
            tags: [Products]
            summary: Atualizar um produto
            parameters:
                - { name: id, in: path, required: true, schema: { type: integer } }
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name: { type: string, example: 'Mouse sem Fio 2.0' }
                                price: { type: number, format: float, example: 99.90 }
                                category_id: { type: integer, example: 1 }
            responses:
                '200':
                    {
                        description: 'Produto atualizado.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } },
                    }
                '401': { description: 'Não autorizado.' }
                '404': { description: 'Produto não encontrado.' }
        delete:
            tags: [Products]
            summary: Deletar um produto
            parameters:
                - { name: id, in: path, required: true, schema: { type: integer } }
            responses:
                '204': { description: 'Produto deletado com sucesso.' }
                '401': { description: 'Não autorizado.' }
                '404': { description: 'Produto não encontrado.' }

    # --- Cart Endpoints ---
    /cart/:
        get:
            tags: [Cart]
            summary: Visualizar o carrinho
            responses:
                '200':
                    {
                        description: 'Carrinho retornado.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Cart' } } },
                    }
                '401': { description: 'Não autorizado.' }
    /cart/add:
        post:
            tags: [Cart]
            summary: Adicionar item ao carrinho
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                product_id: { type: integer, example: 101 }
                                quantity: { type: integer, example: 1 }
                            required: [product_id, quantity]
            responses:
                '200':
                    {
                        description: 'Item adicionado.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Cart' } } },
                    }
                '401': { description: 'Não autorizado.' }
    /cart/remove:
        post:
            tags: [Cart]
            summary: Remover item do carrinho
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                product_id: { type: integer, example: 101 }
                                quantity: { type: integer, example: 1 }
                            required: [product_id, quantity]
            responses:
                '200':
                    {
                        description: 'Item removido.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Cart' } } },
                    }
                '401': { description: 'Não autorizado.' }
    /cart/clear:
        delete:
            tags: [Cart]
            summary: Esvaziar o carrinho
            responses:
                '204': { description: 'Carrinho esvaziado.' }
                '401': { description: 'Não autorizado.' }
    /cart/checkout:
        post:
            tags: [Cart]
            summary: Finalizar a compra (Checkout)
            responses:
                '201':
                    {
                        description: 'Pedido criado.',
                        content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } },
                    }
                '400': { description: 'Carrinho está vazio.' }
                '401': { description: 'Não autorizado.' }
